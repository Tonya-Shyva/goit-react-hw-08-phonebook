{"version":3,"file":"static/js/854.ffe0a578.chunk.js","mappings":"4LAEaA,E,QAAYC,GAAAA,OAAH,kO,iLCATC,EAAOD,EAAAA,GAAAA,KAAH,yCAIJE,EAAQF,EAAAA,GAAAA,MAAH,oHAOLG,EAAeH,EAAAA,GAAAA,KAAH,uI,UCLZI,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAAoCC,EAAAA,EAAAA,WAAS,SAAC,MAAD,KAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAAwBF,EAAAA,EAAAA,UAAS,YAAjC,eAAOG,EAAP,KAAaC,EAAb,KACA,GAAwBJ,EAAAA,EAAAA,UAAS,IAAjC,eAAOK,EAAP,KAAaC,EAAb,KACA,GAA0BN,EAAAA,EAAAA,UAAS,IAAnC,eAAOO,EAAP,KAAcC,EAAd,KACA,GAAgCR,EAAAA,EAAAA,UAAS,IAAzC,eAAOS,EAAP,KAAiBC,EAAjB,KACA,GAA8CV,EAAAA,EAAAA,UAAS,IAAvD,eAAOW,EAAP,KAAwBC,EAAxB,KAEMC,EAAe,SAAAC,GACnB,IAAQT,EAASS,EAAEC,OAAXV,KACR,MAAa,SAATA,EACKC,EAAQQ,EAAEC,OAAOC,OAEb,UAATX,EACKG,EAASM,EAAEC,OAAOC,OAEd,aAATX,EACKK,EAAYI,EAAEC,OAAOC,OAEjB,oBAATX,EACKO,EAAmBE,EAAEC,OAAOC,YADrC,CAID,EA+CD,OACE,UAACtB,EAAD,CAAMuB,SApCa,SAAAH,GACnBA,EAAEI,iBACF,IAAMC,EAAOL,EAAEM,cACTf,EAAOc,EAAKE,SAAShB,KAAKW,MAC1BT,EAAQY,EAAKE,SAASd,MAAMS,MAC5BP,EAAWU,EAAKE,SAASZ,SAASO,MAClCL,EAAkBQ,EAAKE,SAASV,gBAAgBK,MACtD,GACY,KAAVT,GACa,KAAbE,GACS,KAATJ,GACoB,KAApBM,EAKF,GAAIF,EAASa,OAAS,GACpBC,EAAAA,EAAAA,IAAM,gDADR,CAIA,GAAId,IAAaE,EAGf,OAFAY,EAAAA,EAAAA,IAAM,uCACNJ,EAAKE,SAASV,gBAAgBK,MAAQ,IAGxClB,GACE0B,EAAAA,EAAAA,IAAS,CACPnB,KAAAA,EACAE,MAAAA,EACAE,SAAAA,KAGJU,EAAKM,OAbJ,MANCF,EAAAA,EAAAA,IAAM,6BAoBT,EAG+BG,aAAa,MAA3C,WACE,UAAC/B,EAAD,uBAEE,kBAAOQ,KAAK,OAAOE,KAAK,OAAOW,MAAOX,EAAMsB,SAAUd,QAExD,UAAClB,EAAD,oBAEE,kBACEQ,KAAK,QACLE,KAAK,QACLW,MAAOT,EACPoB,SAAUd,QAGd,UAAClB,EAAD,uBAEE,kBACEQ,KAAMA,EACNE,KAAK,WACLW,MAAOP,EACPkB,SAAUd,KAEZ,SAACjB,EAAD,CAAcgC,QApEI,SAAAd,GACT,aAATX,GACFC,EAAQ,QACRF,GAAc,SAAC,MAAD,OAEdE,EAAQ,YACRF,GAAc,SAAC,MAAD,KAEjB,EA4DK,SAAyCD,QAE3C,UAACN,EAAD,+BAEE,kBACEQ,KAAK,WACLE,KAAK,kBACLW,MAAOL,EACPgB,SAAUd,QAGd,SAACrB,EAAA,EAAD,CAAWW,KAAK,SAAhB,wBAGL,E,UChHc,SAAS0B,IACtB,OACE,UAACC,EAAA,EAAD,YACE,SAACC,EAAA,EAAD,WACE,+CAEF,SAAClC,EAAD,MAGL,C","sources":["components/common/BtnStyled.js","components/RegisterForm/RegisterForm.styled.js","components/RegisterForm/RegisterForm.js","pages/Register.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const BtnStyled = styled.button`\n  width: 100px;\n  border-radius: 4px;\n  transition: backround-color 250ms linear;\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    background-color: #21aeeab5;\n    border-color: transparent;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  width: 320px;\n`;\n\nexport const Label = styled.label`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 16px;\n`;\n\nexport const IconPassword = styled.span`\n  position: absolute;\n  top: 20px;\n  right: 10px;\n  cursor: pointer;\n  user-select: none;\n  z-index: 99;\n`;\n","import { toast } from 'react-hot-toast';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { AiOutlineEye, AiOutlineEyeInvisible } from 'react-icons/ai';\nimport { register } from 'redux/auth/operations';\nimport { BtnStyled } from 'components/common/BtnStyled';\nimport { Form, IconPassword, Label } from './RegisterForm.styled';\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n  const [toggleIcon, setToggleIcon] = useState(<AiOutlineEyeInvisible />);\n  const [type, setType] = useState('password');\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n\n  const handleChange = e => {\n    const { name } = e.target;\n    if (name === 'name') {\n      return setName(e.target.value);\n    }\n    if (name === 'email') {\n      return setEmail(e.target.value);\n    }\n    if (name === 'password') {\n      return setPassword(e.target.value);\n    }\n    if (name === 'confirmPassword') {\n      return setConfirmPassword(e.target.value);\n    }\n    return;\n  };\n\n  const togglePassInput = e => {\n    if (type === 'password') {\n      setType('text');\n      setToggleIcon(<AiOutlineEye />);\n    } else {\n      setType('password');\n      setToggleIcon(<AiOutlineEyeInvisible />);\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    const name = form.elements.name.value;\n    const email = form.elements.email.value;\n    const password = form.elements.password.value;\n    const confirmPassword = form.elements.confirmPassword.value;\n    if (\n      email === '' ||\n      password === '' ||\n      name === '' ||\n      confirmPassword === ''\n    ) {\n      toast('Please, fill in all fields');\n      return;\n    }\n    if (password.length < 7) {\n      toast('Password must be at least 7 symbols long');\n      return;\n    }\n    if (password !== confirmPassword) {\n      toast('Wrong confirmation of password');\n      form.elements.confirmPassword.value = '';\n      return;\n    }\n    dispatch(\n      register({\n        name,\n        email,\n        password,\n      })\n    );\n    form.reset();\n  };\n\n  return (\n    <Form onSubmit={handleSubmit} autoComplete=\"off\">\n      <Label>\n        Username\n        <input type=\"text\" name=\"name\" value={name} onChange={handleChange} />\n      </Label>\n      <Label>\n        Email\n        <input\n          type=\"email\"\n          name=\"email\"\n          value={email}\n          onChange={handleChange}\n        />\n      </Label>\n      <Label>\n        Password\n        <input\n          type={type}\n          name=\"password\"\n          value={password}\n          onChange={handleChange}\n        />\n        <IconPassword onClick={togglePassInput}>{toggleIcon}</IconPassword>\n      </Label>\n      <Label>\n        Confirm password\n        <input\n          type=\"password\"\n          name=\"confirmPassword\"\n          value={confirmPassword}\n          onChange={handleChange}\n        />\n      </Label>\n      <BtnStyled type=\"submit\">Register</BtnStyled>\n    </Form>\n  );\n};\n","import { Helmet } from 'react-helmet';\nimport { RegisterForm } from 'components/RegisterForm/RegisterForm';\nimport { Box } from 'components/common/Box';\n\nexport default function Register() {\n  return (\n    <Box>\n      <Helmet>\n        <title>Registration</title>\n      </Helmet>\n      <RegisterForm />\n    </Box>\n  );\n}\n"],"names":["BtnStyled","styled","Form","Label","IconPassword","RegisterForm","dispatch","useDispatch","useState","toggleIcon","setToggleIcon","type","setType","name","setName","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","handleChange","e","target","value","onSubmit","preventDefault","form","currentTarget","elements","length","toast","register","reset","autoComplete","onChange","onClick","Register","Box","Helmet"],"sourceRoot":""}